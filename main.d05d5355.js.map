{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","gameFieldTable","gameScore","loseMessage","winMessage","startMessage","DIRECTION","UP","DOWN","LEFT","RIGHT","KEYTYPES","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","ARROW_DOWN","game","getEmptyGame","startNewGame","innerHTML","classList","add","populateNewCell","renderGame","addEventListener","keyDownHandler","e","repeat","handleNewMove","code","forEach","row","rowIndex","cellValue","cellIndex","remove","cellNode","rows","cells","className","keyType","handleMove","isGameOver","replace","gameHasEmptyCell","column","transpose","colIndex","minIndex","maxIndex","direction","cellsWasMoved","oldRow","returnRow","transformRow","rowsAreEqual","slide","reverse","index","newRow","removeZeroes","i","length","increaseScore","push","join","filter","value","currentScoreNumber","flat","some","cell","currentCellValue","getRandomCellPosition","getRandomCellValue","Math","floor","random","distribution"],"mappings":"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","file":"main.d05d5355.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.button');\nconst gameFieldTable = document.querySelector('.game-field');\nconst gameScore = document.querySelector('.game-score');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\n\nconst DIRECTION = {\n  UP: 'up',\n  DOWN: 'down',\n  LEFT: 'left',\n  RIGHT: 'right',\n};\n\nconst KEYTYPES = {\n  ARROW_LEFT: 'ArrowLeft',\n  ARROW_RIGHT: 'ArrowRight',\n  ARROW_UP: 'ArrowUp',\n  ARROW_DOWN: 'ArrowDown',\n};\n\nlet game = getEmptyGame();\n\nfunction getEmptyGame() {\n  return [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n}\n\nstartButton.addEventListener('click', () => {\n  startNewGame();\n\n  startMessage.classList.add('hidden');\n});\n\nfunction startNewGame() {\n  game = getEmptyGame();\n\n  gameScore.innerHTML = 0;\n\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n\n  populateNewCell();\n  populateNewCell();\n\n  renderGame();\n\n  document.addEventListener('keydown', keyDownHandler);\n}\n\nfunction keyDownHandler(e) {\n  if (e.repeat) {\n    return;\n  }\n\n  const keyType = e.code;\n\n  handleNewMove(keyType);\n}\n\nfunction renderGame() {\n  game.forEach((row, rowIndex) => row.forEach((cellValue, cellIndex) => {\n    if (cellValue === 2048) {\n      winMessage.classList.remove('hidden');\n    }\n\n    const cellNode = gameFieldTable.rows[rowIndex].cells[cellIndex];\n\n    cellNode.className = 'field-cell';\n\n    if (cellValue !== 0) {\n      cellNode.classList.add(`field-cell--${cellValue}`);\n    }\n\n    cellNode.innerHTML = cellValue || '';\n  }));\n}\n\nfunction handleNewMove(keyType) {\n  const minIndex = 0;\n  const maxIndex = 4;\n\n  switch (keyType) {\n    case KEYTYPES.ARROW_LEFT:\n      handleMove(minIndex, maxIndex, DIRECTION.LEFT);\n      break;\n\n    case KEYTYPES.ARROW_RIGHT:\n      handleMove(minIndex, maxIndex, DIRECTION.RIGHT);\n      break;\n\n    case KEYTYPES.ARROW_UP:\n      handleMove(minIndex, maxIndex, DIRECTION.UP);\n      break;\n\n    case KEYTYPES.ARROW_DOWN:\n      handleMove(minIndex, maxIndex, DIRECTION.DOWN);\n      break;\n\n    default:\n      return;\n  }\n\n  renderGame();\n\n  const gameIsOver = isGameOver();\n\n  if (gameIsOver) {\n    winMessage.classList.add('hidden');\n\n    loseMessage.classList.remove('hidden');\n  }\n\n  startButton.innerHTML = 'Restart';\n  startButton.classList.replace('start', 'restart');\n}\n\nfunction isGameOver() {\n  if (gameHasEmptyCell()) {\n    return false;\n  }\n\n  for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n    const row = game[rowIndex];\n    const column = transpose(rowIndex);\n\n    for (let colIndex = 0; colIndex < 3; colIndex++) {\n      if (row[colIndex] === row[colIndex + 1]) {\n        return false;\n      }\n\n      if (column[colIndex] === column[colIndex + 1]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction handleMove(minIndex, maxIndex, direction) {\n  let cellsWasMoved = false;\n\n  for (let rowIndex = minIndex; rowIndex < maxIndex; rowIndex++) {\n    let oldRow = game[rowIndex];\n\n    let row = [...game[rowIndex]];\n\n    if (direction === DIRECTION.UP || direction === DIRECTION.DOWN) {\n      oldRow = transpose(rowIndex);\n    }\n\n    row = transformRow(direction, row, rowIndex);\n\n    returnRow(direction, row, rowIndex);\n\n    if (!rowsAreEqual(oldRow, row)) {\n      cellsWasMoved = true;\n    }\n  }\n\n  if (cellsWasMoved) {\n    populateNewCell();\n  }\n}\n\nfunction transformRow(direction, row, rowIndex) {\n  switch (direction) {\n    case DIRECTION.UP:\n      return slide(transpose(rowIndex));\n\n    case DIRECTION.DOWN:\n      return slide(transpose(rowIndex).reverse()).reverse();\n\n    case DIRECTION.RIGHT:\n      return slide(row.reverse()).reverse();\n\n    case DIRECTION.LEFT:\n      return slide(row);\n\n    default:\n      return row;\n  }\n}\n\nfunction returnRow(direction, row, rowIndex) {\n  switch (direction) {\n    case DIRECTION.LEFT:\n    case DIRECTION.RIGHT:\n      game[rowIndex] = row;\n      break;\n\n    default:\n      game[0][rowIndex] = row[0];\n      game[1][rowIndex] = row[1];\n      game[2][rowIndex] = row[2];\n      game[3][rowIndex] = row[3];\n      break;\n  }\n}\n\nfunction transpose(index) {\n  return [\n    game[0][index],\n    game[1][index],\n    game[2][index],\n    game[3][index],\n  ];\n}\n\nfunction slide(row) {\n  let newRow = removeZeroes(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n\n      increaseScore(newRow[i]);\n    }\n  }\n\n  newRow = removeZeroes(newRow);\n\n  while (newRow.length < 4) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction rowsAreEqual(oldRow, newRow) {\n  return oldRow.join('.') === newRow.join('.');\n}\n\nfunction removeZeroes(row) {\n  return row.filter(value => value !== 0);\n}\n\nfunction increaseScore(value) {\n  const currentScoreNumber = +gameScore.innerHTML;\n\n  gameScore.innerHTML = currentScoreNumber + value;\n}\n\nfunction gameHasEmptyCell() {\n  return game.flat().some(cell => cell === 0);\n}\n\nfunction populateNewCell() {\n  if (!gameHasEmptyCell()) {\n    return;\n  }\n\n  let rowIndex = getRandomCellPosition();\n  let colIndex = getRandomCellPosition();\n\n  let currentCellValue = game[rowIndex][colIndex];\n\n  while (currentCellValue !== 0) {\n    rowIndex = getRandomCellPosition();\n    colIndex = getRandomCellPosition();\n\n    currentCellValue = game[rowIndex][colIndex];\n  }\n\n  game[rowIndex][colIndex] = getRandomCellValue();\n}\n\nfunction getRandomCellPosition() {\n  return Math.floor(Math.random() * 4);\n}\n\nfunction getRandomCellValue() {\n  const distribution = [2, 2, 2, 2, 2, 2, 4, 2, 2, 2];\n  const index = Math.floor(distribution.length * Math.random());\n\n  return distribution[index];\n}\n"]}